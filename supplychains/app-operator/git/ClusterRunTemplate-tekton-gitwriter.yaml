apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  name: tekton-git-writer
spec:
  template:
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: $(runnable.metadata.name)$-
    spec:
      serviceAccountName: tap-default
      taskRef:
        kind: ClusterTask
        name: micropets-git-cli
      workspaces:
        - name: source
          emptyDir: { }
        - name: input
          emptyDir: { }
        - name: ssh-directory
          secret:
            secretName: github-ssh-secret
      params:
        - name: GIT_USER_NAME
          value: $(runnable.spec.inputs.git_username)$
        - name: GIT_USER_EMAIL
          value: $(runnable.spec.inputs.git_user_email)$
        - name: USER_HOME
          value: /root
        - name: GIT_SCRIPT
          value: |
            export COMMIT_MESSAGE="$(runnable.spec.inputs.commit_message)$"            
            export REVISION_ID="$(runnable.spec.inputs.git_revision)$"
            COMMIT=`echo ${REVISION_ID} | cut -d '/' -f 2`
            export GIT_URL="$(runnable.spec.inputs.git_url)$"   
               
            echo "-- REVISION_ID IS ${REVISION_ID}"
            echo "-- COMMIT IS ${COMMIT}"

            #echo "---- ID_RSA ----"
            #cat /root/.ssh/id_rsa
            #echo "---- /ID_RSA ----"

            export BRANCH="$(runnable.spec.inputs.branch)$"
            if [[ -n "$(runnable.spec.inputs.skip_host_checking)$" && "$(runnable.spec.inputs.skip_host_checking)$" = true ]]
            then
              export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
            fi
            if [[ -n "$(runnable.spec.inputs.git_ssh_variant)$" ]]
            then
              export GIT_SSH_VARIANT="$(runnable.spec.inputs.git_ssh_variant)$"
            fi
            git init
            if [[ -n "$(runnable.spec.inputs.git_server_port)$" ]]; then
              git remote add origin $(runnable.spec.inputs.git_ssh_user)$@$(runnable.spec.inputs.git_server)$:$(runnable.spec.inputs.git_server_port)$/$(runnable.spec.inputs.git_repository)$
            else
              git remote add origin $(runnable.spec.inputs.git_ssh_user)$@$(runnable.spec.inputs.git_server)$:$(runnable.spec.inputs.git_repository)$
            fi
            # TODO remove the fetch and branch
            git fetch
            git branch
            git pull origin "`git remote show origin | grep "HEAD branch" | sed 's/.*: //'`"
            git pull origin "$BRANCH" || git branch "$BRANCH"
            git checkout "$BRANCH"
            
            export CONFIG_MAP_NAME=$(runnable.spec.inputs.input_config_map_name)$
            export CONFIG_MAP_FIELD=$(runnable.spec.inputs.input_config_map_field)$
            export CONFIG_MAP_PATH=$(runnable.spec.inputs.input_config_map_path)$
            export SCHEMA="$(runnable.spec.inputs.schema)$"
            export VALUES="$(runnable.spec.inputs.values)$"

            echo "CONFIG_MAP_FIELD ${CONFIG_MAP_FIELD}"
            echo "CONFIG_MAP_PATH ${CONFIG_MAP_PATH}"
            echo "create the path..."
            mkdir -p ${CONFIG_MAP_PATH}
            
            echo "${SCHEMA}" | tee "${CONFIG_MAP_PATH}/schema.yaml"
            echo "${VALUES}" | tee "${CONFIG_MAP_PATH}/values.yaml"
            
            
            git add .
            git status
            git commit --allow-empty -m "$CONFIG_MAP_NAME: $COMMIT_MESSAGE ${GIT_URL}commit/${COMMIT}"
            echo "pull before push....."
            git pull origin "$BRANCH"
            git push --set-upstream origin "$BRANCH"
