apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: micropet-service-intermediate-config-gui
spec: 
  params:
    - name: port
      default: 8080
    - name: brokerService
      default: "/"
    - name: color
      default: green  
    - name: component
      default: gui
  configPath: .data
  ytt: |
    #@ load("@ytt:data", "data")    
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:json", "json")

    #@ def values(): 
    application:
      name: micro-pet   
    service:  
      name: #@ data.values.workload.metadata.name
      component: #@ data.values.params.component  
      port: #@ data.values.params.port
      image: #@ data.values.image
      config_path: /workspace/dist/assets
      config_filename: config.json 
      usedb: false
      gui:            
        broker_service: #@ data.values.params.brokerService
        color: #@ data.values.params.color
    #@ end

    #@ def schema():
    application:
      name: name
    service:
      name: name
      component: component
      port: 0
      image: image
      replicas: 1
      config_path: config_path
      config_filename: config_filename 
      usedb: false                                
      gui:
        color: color
        broker_service: broker_service
      backend:            
        frequencyError: 0
        observability: true
        mode: "RANDOM_NUMBER"  
    environment:
      name: name
      ingress: ingress
      domain:
        internal: internal
        exposed: exposed
    #@ end

    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name
    data:      
      values: #@ "\n".join(["#@data/values","---",yaml.encode(values())])
      schema: #@ "\n".join(["#@data/values-schema","---",yaml.encode(schema())])

  
    
