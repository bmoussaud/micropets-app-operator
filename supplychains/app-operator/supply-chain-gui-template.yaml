
#@ load("@ytt:data", "data")
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: micropet-gui-image
spec:
  imagePath: .status.latestImage
  template:
    apiVersion: kpack.io/v1alpha1
    kind: Image
    metadata:
      name: micropet-$(workload.metadata.name)$
    spec:
      tag: #@ data.values.registry.server+ "/"+ data.values.image_prefix + "-tap-$(workload.metadata.name)$"
      serviceAccount: micropet-service-account
      builder:
        kind: ClusterBuilder
        name: micropet-builder
      source:
        blob:
          url: $(sources.source.url)$
        subPath: $(workload.metadata.name)$
      build:
        env:
          - name: BP_IMAGE_LABELS
            value: watermark.project=micropet watermark.author=benoit@moussaud
          - name: NPM_CONFIG_LOGLEVEL
            value: DEBUG
          - name: BP_NODE_RUN_SCRIPTS
            value: build
          - name: NODE_ENV
            value: development  
#@yaml/text-templated-strings
---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: micropet-gui-service-config
spec:  
  params:
    - name: brokerService
      default: #@ "http://"+ data.values.service.domain+ "/pets/v1/default" 
    - name: observability
      default: false 
  configPath: .metadata.name
  template:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: micropet-service-$(workload.metadata.name)$-config       
    data:
      values.yml: |  
        service:  
          name: $(workload.metadata.name)$          
          replicas: 1          
          virtual_host: (@= data.values.service.domain @)
          broker_service: $(params.brokerService)$
          image: $(images.image.image)$
          color: green
          port: 8080
          stage: DEV
          config_path: /workspace/dist/assets
          observability: $(params.observability)$                    
        application: 
          name: micro-pet
        registry:          
          server: (@= data.values.registry.server @)/library
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: micropet-gui-deploy
spec:
  template:
    apiVersion: kappctrl.k14s.io/v1alpha1
    kind: App
    metadata:
      name: $(workload.metadata.name)$-application
    spec:
      serviceAccountName: default  
      fetch:
        - git:
            url: https://github.com/bmoussaud/micropets-app-operator
            ref: main
            subPath: kapp/gui
      template:
        - ytt:
            ignoreUnknownComments: true
            valuesFrom:
              - configMapRef:
                  name: micropet-service-$(workload.metadata.name)$-config   
      deploy:
        - kapp: {}