# Copyright 2021 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@ load("@ytt:data", "data")
---

#
#
# `source` instantiates a GitRepository object, responsible for keeping track
# of commits made to a git repository, making them available as blobs to
# further components in the supply chain.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: micropet-source
spec:
  urlPath: .status.artifact.url
  revisionPath: .status.artifact.revision

  template:
    apiVersion: source.toolkit.fluxcd.io/v1beta1
    kind: GitRepository
    metadata:
      name: micropet-$(workload.metadata.name)$
    spec:
      interval: 1m
      url: $(workload.spec.source.git.url)$
      ref: $(workload.spec.source.git.ref)$
      gitImplementation: libgit2
      ignore: ""
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: micropet-image
spec:
  imagePath: .status.latestImage
  template:    
    apiVersion: kpack.io/v1alpha2
    kind: Image
    metadata:
      name: micropet-$(workload.metadata.name)$
    spec:
      tag: #@ data.values.registry.server+ "/"+ data.values.image_prefix + "-tap-$(workload.metadata.name)$"
      serviceAccountName: micropet-service-account
      builder:
        kind: ClusterBuilder
        name: micropet-builder
      failedBuildHistoryLimit: 2
      successBuildHistoryLimit: 2
      cache:
        volume:
          size: "1.5Gi" 
      source:
        blob:
          url: $(sources.source.url)$
        subPath: $(workload.metadata.name)$
#@yaml/text-templated-strings
---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: micropet-service-config
spec:
  params:
    - name: port
      default: 7003
    - name: mode
      default: "RANDOM_NUMBER"
    - name: observability
      default: false
  configPath: .metadata.name
  template:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: micropet-service-$(workload.metadata.name)$-config     
    data:
      values.yml: |  
        application:
          name: micro-pet
        service:  
          name: $(workload.metadata.name)$
          port: $(params.port)$
          image: $(images.image.image)$
          replicas: 1    
          backend:
            observability: $(params.observability)$
            mode: $(params.mode)$
            frequencyError: 10          
        environment:
          name: aws/europ
          ingress: contour
          domain:
            internal: .micropets-supplychain.svc.cluster.local
            exposed: front.mytanzu.xyz
---
#
#
# `app-deploy` instantiates a `kapp-ctrl/App` making use of an image that comes
# as input in the form of `$(images.image.image)$`.
#
# the use of `App` here is important because of how `knative` updates the
# knative service under the hood to include some extra annotations that _can't_
# be mutated once applied by knative's controller. As `kapp` is able to be
# configured to not patch certain features (something `cartographer` can't
# yet), we're able to bridge that gap with the use of `kapp-ctrl/App`.
#
#
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: micropet-deploy
spec:
  template:
    apiVersion: kappctrl.k14s.io/v1alpha1f
    kind: App
    metadata:
      name: $(workload.metadata.name)$-application
    spec:
      serviceAccountName: default  
      fetch:
        - git:
            url: https://github.com/bmoussaud/micropets-app-operator
            ref: main
            subPath: kapp/service
      template:
        - ytt:
            ignoreUnknownComments: true
            valuesFrom:
              - configMapRef:
                  name: micropet-service-$(workload.metadata.name)$-config   
      deploy:
        - kapp: {}