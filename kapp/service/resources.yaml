#@ load("@ytt:data", "data")
#@yaml/text-templated-strings
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.service.name + "-db-credentials"
  labels:
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
type: Opaque
data:
  username: YWRtaW4K
  password: cGxlYXNlY2hhbmdlbWU=
---
#@ load("helpers.star","deployment")
---
kind: Deployment
apiVersion: apps/v1
metadata:  
  name:  #@ "app-"+data.values.service.name
  labels:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name 
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
spec:
  replicas: #@ data.values.service.replicas
  selector:
    matchLabels:
      service: #@ data.values.service.name      
      k8s-app: #@ data.values.application.name
      app.kubernetes.io/component: #@ data.values.service.name
      app.kubernetes.io/part-of: #@ data.values.application.name 
  template:
    metadata:
      labels:
        service: #@ data.values.service.name        
        k8s-app: #@ data.values.application.name
        app.kubernetes.io/component: #@ data.values.service.name
        app.kubernetes.io/part-of: #@ data.values.application.name 
    spec:
      volumes:
        - name: config-volume
          configMap:
            name:  #@ data.values.service.name + "-config"
            items:            
            - key: #@ data.values.service.config_filename  
              path: #@ data.values.service.config_filename          
      containers:
        - name: #@ data.values.service.name
          image: #@ data.values.service.image
          #imagePullPolicy: Always
          ports:
            - name: #@ "http-{}".format(data.values.service.name)              
              containerPort: #@ data.values.service.port
          volumeMounts:
            - name: config-volume
              mountPath: #@ data.values.service.config_path  
          livenessProbe:
            httpGet:
              port: #@ data.values.service.port
              path: /liveness
            initialDelaySeconds: 10
            periodSeconds: 2
          readinessProbe:
            httpGet:
              port: #@ data.values.service.port
              path: /readiness
            initialDelaySeconds: 10
            periodSeconds: 2
          env:
            - name: SERVICE_CONFIG_DIR
              value: #@ data.values.service.config_path  
            #@ if data.values.service.name == "gui":
            - name: PORT
              value: #@ str(data.values.service.port)
            #@ end
            #@ if data.values.service.usedb:
            - name: POSTGRES_URL
              value: #@ "jdbc:postgresql://"+data.values.service.name+":5432/"+ data.values.service.name            
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: #@ data.values.service.name+ "-app-user-db-secret"
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: #@ data.values.service.name+ "-app-user-db-secret"
                  key: password
            #@ end
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: #@ data.values.service.name +"-service"
  labels:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name         
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: ""
    kapp.k14s.io/disable-label-scoping: ""
    kapp.k14s.io/disable-default-ownership-label-rules: ""
spec:
  ports:
    - name: #@ "http-{}".format(data.values.service.name)   
      port: #@ data.values.service.port
      #appProtocol: http
  selector:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  labels:
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name   
  annotations:     
    #@ if/end data.values.environment.ingress != "none":
    kubernetes.io/ingress.class: #@ data.values.environment.ingress   
  name: #@ data.values.service.name + "-ingress"
spec:
  rules:
    - host: #@ data.values.environment.domain.exposed
      http:
        paths:
        #@ if data.values.service.name == "gui":
          - path: /
            pathType: Prefix
            backend:
              service:
                name: #@ data.values.service.name +"-service"
                port: 
                  number: #@ data.values.service.port
        #@ else:
          - path: #@ "/"+ data.values.service.name        
            pathType: Prefix
            backend:
              service:
                name: #@ data.values.service.name +"-service"
                port: 
                  number: #@ data.values.service.port
        #@ end
---







