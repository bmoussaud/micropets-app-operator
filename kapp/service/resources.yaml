#@ load("@ytt:data", "data")
#@yaml/text-templated-strings
---
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    kapp.k14s.io/versioned : ""
  name: #@ data.values.service.name + "-config"
  labels:
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
data:
#@ if data.values.service.backend.observability:
  pets_config.json: |-
    {
        "service": {
            "port": ":(@=  str(data.values.service.port) @)",
            "listen": "true",
            "mode": "(@=  data.values.service.backend.mode @)",
            "frequencyError": 10,
            "delay": {
              "period": 100,
              "amplitude": 0.3
            },
            "from": "(@=  data.values.environment.name @)"
        },
        "observability": {          
          "enable": true,          
          "application": "micropets",
          "service": "(@=  str(data.values.service.name) @)",
          "cluster": "us-west",
          "shard": "primary",
          "server": "https://vmware.wavefront.com",
          "token": "df3e4928-3fdc-44b5-80d5-01bcc522f97b"
        },
        "backends": [
            {
                "name": "cats",
                "host": "cats-service(@= data.values.environment.domain.internal @)",
                "port": "7002",
                "context": "/cats/v1/data"
            },
            {
                "name": "dogs",
                "host": "dogs-service(@= data.values.environment.domain.internal @)",
                "port": "7003",
                "context": "/dogs/v1/data"
            },
            {
                "name": "fishes",
                "host": "fishes-service(@= data.values.environment.domain.internal @)",
                "port": "7007",
                "context": "/fishes/v1/data"
            }
        ]
    }
#@ else:
  pets_config.json: |-
    {
        "service": {
            "port": ":(@=  str(data.values.service.port) @)",
            "listen": "true",
            "mode": "(@=  data.values.service.backend.mode @)",
            "frequencyError": 10,
            "delay": {
              "period": 100,
              "amplitude": 0.3
            },
            "from": "(@=  data.values.environment.name @)"
        },
        "observability": {          
          "enable": false                   
        },
        "backends": [
            {
                "name": "cats",
                "host": "cats-service(@= data.values.environment.domain.internal @)",
                "port": "7002",
                "context": "/cats/v1/data"
            },
            {
                "name": "dogs",
                "host": "dogs-service(@= data.values.environment.domain.internal @)",
                "port": "7003",
                "context": "/dogs/v1/data"
            },
            {
                "name": "fishes",
                "host": "fishes-service(@= data.values.environment.domain.internal @)",
                "port": "7007",
                "context": "/fishes/v1/data"
            }
        ]
    }
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.service.name + "-db-credentials"
  labels:
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
type: Opaque
data:
  user: YWRtaW4K
  password: cGxlYXNlY2hhbmdlbWU=
---
kind: Deployment
apiVersion: apps/v1
metadata:  
  name: #@ data.values.service.name +"-app"
  labels:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name 
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
spec:
  replicas: #@ data.values.service.replicas
  selector:
    matchLabels:
      service: #@ data.values.service.name      
      k8s-app: #@ data.values.application.name
      app.kubernetes.io/component: #@ data.values.service.name
      app.kubernetes.io/part-of: #@ data.values.application.name 
  template:
    metadata:
      labels:
        service: #@ data.values.service.name        
        k8s-app: #@ data.values.application.name
        app.kubernetes.io/component: #@ data.values.service.name
        app.kubernetes.io/part-of: #@ data.values.application.name 
    spec:
      volumes:
        - name: config-volume
          configMap:
            name:  #@ data.values.service.name + "-config"
            items:            
            - key: pets_config.json
              path: pets_config.json            
      containers:
        - name: #@ data.values.service.name
          image: #@ data.values.service.image
          #imagePullPolicy: Always
          ports:
            - name: #@ data.values.service.name
              containerPort: #@ data.values.service.port
          volumeMounts:
            - name: config-volume
              mountPath: /config/
          livenessProbe:
            httpGet:
              port: #@ data.values.service.port
              path: /liveness
            initialDelaySeconds: 10
            periodSeconds: 2
          readinessProbe:
            httpGet:
              port: #@ data.values.service.port
              path: /readiness
            initialDelaySeconds: 10
            periodSeconds: 2
          env:
            - name: SERVICE_CONFIG_DIR
              value: /config
            - name: DATABASE_URL
              value: #@ "jdbc:postgresql://"+data.values.service.name+"-db:5432/"+ data.values.service.name
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: #@ data.values.service.name+ "-db-credentials"
                  key: user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: #@ data.values.service.name+ "-db-credentials"
                  key: password

      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: #@ data.values.service.name +"-service"
  labels:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name         
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: ""
    kapp.k14s.io/disable-label-scoping: ""
    kapp.k14s.io/disable-default-ownership-label-rules: ""
spec:
  ports:
    - name: #@ data.values.service.name
      port: #@ data.values.service.port
      appProtocol: http
  selector:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  labels:
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
  annotations:
    kubernetes.io/ingress.class: #@ data.values.environment.ingress 
  name: #@ data.values.service.name + "-ingress"
spec:
  rules:
    - host: #@ data.values.environment.domain.exposed
      http:
        paths:
          - path: #@ "/"+ data.values.service.name
            pathType: Prefix
            backend:
              service:
                name: #@ data.values.service.name +"-service"
                port: 
                  number: #@ data.values.service.port
---
---






