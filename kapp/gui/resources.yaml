#@ load("@ytt:data", "data")
#@yaml/text-templated-strings
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
  annotations:
    kapp.k14s.io/versioned : ""
  name: #@ data.values.service.name + "-config"
data:
  config.json: |-
    {  
      "petServiceUrl": "(@=  data.values.service.gui.broker_service @)",
      "stage": "(@=  data.values.environment.name @)",
      "debug": "False",
      "stage_color": "(@=  data.values.service.gui.color @)",
      "load_one_by_one": "True"
    }
---
kind: Deployment
apiVersion: apps/v1
metadata:  
  name: #@ data.values.service.name +"-app"
  labels:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name  
spec:
  replicas: #@ data.values.service.replicas
  selector:
    matchLabels:
      service: #@ data.values.service.name      
      k8s-app: #@ data.values.application.name
      app.kubernetes.io/component: #@ data.values.service.name
      app.kubernetes.io/part-of: #@ data.values.application.name 
  template:
    metadata:
      labels:
        service: #@ data.values.service.name               
        k8s-app: #@ data.values.application.name
        app.kubernetes.io/component: #@ data.values.service.name
        app.kubernetes.io/part-of: #@ data.values.application.name 
    spec:
      volumes:
        - name: config-volume
          configMap:
            name:  #@ data.values.service.name + "-config"
            items:            
            - key: config.json
              path: config.json                        
      containers:
        - name: #@ data.values.service.name
          image: #@ data.values.service.image
          #imagePullPolicy: Always
          ports:
            - name: #@ "http-{}".format(data.values.service.name)      
              containerPort: #@ data.values.service.port
          volumeMounts:
            - name: config-volume
              mountPath: #@ data.values.service.gui.config_path  
          env:
            - name: PORT
              value: #@ str(data.values.service.port)
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: #@ data.values.service.name +"-service"
  labels:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
spec:
  ports:
    - protocol: TCP
      name: #@ "http-{}".format(data.values.service.name)      
      port: #@ data.values.service.port
  selector:
    service: #@ data.values.service.name    
    k8s-app: #@ data.values.application.name
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name 
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  labels:
    app.kubernetes.io/component: #@ data.values.service.name
    app.kubernetes.io/part-of: #@ data.values.application.name    
  annotations:
    kubernetes.io/ingress.class: #@ data.values.environment.ingress 
  name: #@ data.values.service.name + "-ingress"
spec:
  rules:
    - host: #@ data.values.environment.domain.exposed
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: #@ data.values.service.name +"-service"
                port: 
                  number: #@ data.values.service.port
---
---





